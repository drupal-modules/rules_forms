<?php

/**
 * @file
 * Rules Forms provides events, conditions, and actions for site forms.
 */

define('RULES_FORMS_ADMIN_PATH', 'admin/config/workflow/rules/forms');

/**
 * Implements hook_help().
 */
function rules_forms_help($path, $arg) {
  if ($path === RULES_FORMS_ADMIN_PATH) {
    return '<p>' . t('Settings and overview of form events.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function rules_forms_permission() {
  return array(
    'administer rules forms rules' => array(
      'title' => t('Administer Rules Forms rules'),
      'description' => t('Grants access to building rules for forms.'),
    ),
    'administer rules forms' => array(
      'title' => t('Administer Rules Forms'),
      'description' => t('Grants access to Rules Forms settings and activating or deactivating rules for forms.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function rules_forms_menu() {
  $items = array();
  $items[RULES_FORMS_ADMIN_PATH] = array(
    'title' => 'Form events',
    'description' => 'Configure Rules forms events.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rules_forms_admin_events'),
    'access arguments' => array('administer rules forms'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'includes/rules_forms.admin.inc',
  );
  $items[RULES_FORMS_ADMIN_PATH . '/%/activate'] = array(
    'title' => 'Activate events for a form',
    'type' => MENU_CALLBACK,
    'page callback' => 'rules_forms_activate',
    'page arguments' => array(5),
    'access arguments' => array('administer rules forms'),
    'file' => 'includes/rules_forms.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function rules_forms_cron() {
  $form_events = variable_get('rules_forms_event_info', array());
  foreach ($form_events as $form_id => $info) {
    $form_events[$form_id]['reset'] = TRUE;
  }
  variable_set('rules_forms_event_info', $form_events);
}

/**
 * Implements hook_form_alter().
 */
function rules_forms_form_alter(&$form, &$form_state, $form_id) {
  $form_events = variable_get('rules_forms_event_info', array());

  if (isset($form_events[$form_id])) {
    // Set elements for form events.
    rules_forms_invoke_event('form_built', $form, $form_state, $form_id);
    $form['#validate'][] = 'rules_forms_event_validate';
    $form['#submit'][] = 'rules_forms_event_submit';
    $form['#after_build'][] = 'rules_forms_after_build';
  }
  elseif (!empty($_SESSION['rules_forms_message'])) {
    // Display form ID message if enabled for this session.
    $link = l($form_id, RULES_FORMS_ADMIN_PATH . '/' . $form_id . '/activate/');
    $msg = t('Activate events for ');
    drupal_set_message($msg . $link, 'status', FALSE);
  }
}

/**
 * Validation handler to invoke "form validate" events
 *
 * @see rules_forms_form_alter()
 */
function rules_forms_event_validate(&$form, &$form_state) {
  rules_forms_invoke_event('form_validate', $form, $form_state);
}

/**
 * Submit handler to invoke "form submitted" events
 *
 ** @see rules_forms_form_alter()
 */
function rules_forms_event_submit(&$form, &$form_state) {
  rules_forms_invoke_event('form_submit', $form, $form_state);
}

/**
 * Invoke rules event of a certain type.
 *
 * @see rules_forms_event_validate()
 * @see rules_forms_event_submit()
 * @see rules_forms_form_alter()
 */
function rules_forms_invoke_event($event_type, &$form, &$form_state, $form_id = NULL) {
  global $user;
  if (empty($form_id)) {
    $form_id = $form['form_id']['#value'];
  }

  // Prepare form data to be passed by reference as ArrayObjects.
  $form_data = new ArrayObject((array)$form);
  $form_state_data = new ArrayObject((array)$form_state);

  $elements = array();
  $form_events = variable_get('rules_forms_event_info', array());
  foreach ($form_events[$form_id]['elements'] as $element_id => $info) {
    $elements[$element_id] = $element_id;
  }

  // Forms are passed by reference via the ArrayObject class.
  $args = array(
    'rules_forms_' . $form_id . '_' . $event_type,
    $form_data,
    $form_state_data,
    $form_id,
    $user,
  ) + $elements;

  call_user_func_array('rules_invoke_event', $args);

  // Repopulate form arrays to update the form.
  $form = (array) $form_data;
  $form_state = (array) $form_state_data;
}

/**
 * Add element IDs on the form if the setting is enabled.
 */
function rules_forms_after_build($form, &$form_state) {
  $form_events = variable_get('rules_forms_event_info', array());
  $form_id = isset($form['#id']) ? str_replace('-', '_', $form['#id']) : NULL;
  // Set elements for form events if necessary.
  if ((isset($form_events[$form_id]['reset']) && $form_events[$form_id]['reset'] && $reset = TRUE)
      || (!isset($form_events[$form_id]['elements']) || empty($form_events[$form_id]['elements']))) {
    if (!empty($reset)) {
      $form_events[$form_id]['elements'] = array();
      $form_events[$form_id]['reset'] = FALSE;
    }
    rules_forms_build_elements($form, $form_events[$form_id]['elements']);
    variable_set('rules_forms_event_info', $form_events);
    rules_clear_cache();
  }
  return $form;
}

/**
 * Builds elements of a form for storage in a variable.
 *
 * @param $form
 *   The form whose elements info is being saved.
 * @param $elements
 *   A variable which will be populated with an array of element information.
 * @param $parent
 *   A string identifying the parent of the current element being processed.
 *   This parameter should not be passed in and is used only recursively.
 * @see rules_forms_form_alter()
 */
function rules_forms_build_elements($form, &$elements, $parent = '') {
  foreach (element_children($form) as $key) {
    if (isset($form[$key]['#type']) && isset($form[$key]['#title']) && $form[$key]['#type'] !== 'hidden' && $form[$key]['#type'] !== 'token') {
      $elements[$parent . $key] = array(
        'type' => $form[$key]['#type'],
        'label' => $form[$key]['#title'],
      );
    }
    // Recursive call on children.
    rules_forms_build_elements($form[$key], $elements, $parent . $key . ':');
  }
}
